/*====================================================================| Version: March 1, 2003\===================================================================*//*====================================================================| EPFL/STI/IOA/BIG| Mathews Jacob| Bldg. BM-Ecublens 4.141| CH-1015 Lausanne VD|| phone (CET): +41(21)693.51.43| fax: +41(21)693.37.01| RFC-822: Mathews.Jacob@epfl.ch|| URL: http://bigwww.epfl.ch/jacob\===================================================================*//*====================================================================| Additional help available at http://bigwww.epfl.ch/jacob/splineSnake/\===================================================================*/package dropsnake;import ij.plugin.PlugIn;import ij.process.*;import java.awt.*;import java.awt.event.*;import java.io.*;import java.util.*;import java.lang.*;import ij.*;import ij.gui.*;import ij.ImagePlus;import ij.ImageStack;public class CreateMovie extends Object{	private float[] processorImage;	private int nx;	private int ny;	private Curve currentCurve;	private ImageStack stack;	private ImageProcessor ip;	private int allpass = 256*257 + 1;	private int yellow = (256*257)*255;	private int red = (255*256*256);	private int blue = (255);	private int green = (256*255);	private int currentcolor = blue;public CreateMovie(ImagePlus initialImage, Curve snakeCurve)	{		this.currentCurve = snakeCurve;				ImageAccess junk = new ImageAccess(initialImage.getProcessor()); 		nx = junk.getWidth();		ny = junk.getHeight();		ImageAccess rawImage = new ImageAccess(nx, ny, ImageAccess.FLOAT);		rawImage.copy(junk);				ip = rawImage.getImageProcessor();		processorImage = (float[])(rawImage.getImageProcessor().getPixels());							stack = new ImageStack(nx,ny);	}	public void addSlice()	{				int[] imageArray = new int[nx*ny];		for(int i=0;i<nx*ny;i++)			{				imageArray[i] = (int)(processorImage[i]*allpass);			}				for(int i=0; i<currentCurve.NCurvepts-1; i++)			drawLine(imageArray, currentCurve.CurveX[i], currentCurve.CurveX[i+1],currentCurve.CurveY[i], currentCurve.CurveY[i+1]);		drawLine(imageArray, currentCurve.CurveX[0], currentCurve.CurveX[currentCurve.NCurvepts-1],currentCurve.CurveY[0], currentCurve.CurveY[currentCurve.NCurvepts-1]);					/*for(int i=0; i<currentCurve.NCurvepts; i+=currentCurve.Nsamples)			addDot(imageArray, (int)(currentCurve.CurveX[i]+0.5),(int)(currentCurve.CurveY[i]+0.5));	*/		ColorProcessor currentProcessor = new ColorProcessor(nx,ny,imageArray);		stack.addSlice("",currentProcessor);		IJ.write("adding the slice");	}public void showMovie()	{		ImagePlus newPlus = new ImagePlus("Movie",stack);		newPlus.show();	}public void addDot(int[] imageArray, int x, int y)	{			if(x>2 && x<nx-2 && y>2 && y<ny-2)			{							imageArray[x+nx*y]=red;				imageArray[x+1+nx*y]=red;				imageArray[x-1+nx*y]=red;				imageArray[x+nx*(y+1)]=red;				imageArray[x+nx*(y-1)]=red;				imageArray[x+1+nx*(y+1)]=red;				imageArray[x+1+nx*(y-1)]=red;				imageArray[x-1+nx*(y+1)]=red;				imageArray[x-1+nx*(y-1)]=red;								imageArray[x+2+nx*y]=red;				imageArray[x-2+nx*y]=red;				imageArray[x+nx*(y+2)]=red;				imageArray[x+nx*(y-2)]=red;								imageArray[x+2+nx*(y+1)]=red;				imageArray[x+2+nx*(y-1)]=red;				imageArray[x-2+nx*(y+1)]=red;				imageArray[x-2+nx*(y-1)]=red;								imageArray[x+1+nx*(y+2)]=red;				imageArray[x+1+nx*(y-2)]=red;				imageArray[x-1+nx*(y+2)]=red;				imageArray[x-1+nx*(y-2)]=red;			}	}	public void addPoint(int[] imageArray, double x, double y)	{		int floorx = (int)x;		int floory = (int)y;				if(floorx>0 && floorx<nx-1 && floory>0 && floory<ny-1)			{				imageArray[floorx+nx*floory]      = currentcolor;				imageArray[floorx+1+nx*floory]    = currentcolor;				imageArray[floorx+1+nx*floory] 	 = currentcolor;				imageArray[(floorx+1)+nx*(floory+1)] =currentcolor;			}				/*int floorx = (int)(x+0.5);		int floory = (int)(y+0.5);		imageArray[floorx+nx*floory]=currentcolor;		*/			}	public void drawLine(int[] imageArray, double x1, double x2, double y1, double y2)	{		if(Math.abs(x1-x2)+Math.abs(y1-y2)<1)			addPoint(imageArray, x1, y1);		else			{				int n;				if(Math.abs(x1-x2)>Math.abs(y1-y2))					n = (int)(Math.abs(x1-x2)+1);				else					n = (int)(Math.abs(y1-y2)+1);									double deltax = (x1-x2)/((double)n);				double deltay = (y1-y2)/((double)n);				for(int i=0; i<n;i++)					addPoint(imageArray, x1+deltax*i, y1+deltay*i);			}	}							}