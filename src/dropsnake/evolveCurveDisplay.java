/*====================================================================| Version: March 1, 2003\===================================================================*//*====================================================================| EPFL/STI/IOA/BIG| Mathews Jacob| Bldg. BM-Ecublens 4.141| CH-1015 Lausanne VD|| phone (CET): +41(21)693.51.43| fax: +41(21)693.37.01| RFC-822: Mathews.Jacob@epfl.ch|| URL: http://bigwww.epfl.ch/jacob\===================================================================*//*====================================================================| Additional help available at http://bigwww.epfl.ch/jacob/splineSnake/\===================================================================*/package dropsnake;import ij.plugin.PlugIn;import ij.process.*;import java.awt.*;import java.awt.event.*;import java.io.*;import java.util.*;import java.lang.*;import ij.*;//-------------------------------------------// Class which deals with evolving the display // curve to give it a livewire-like behaviour//-------------------------------------------public class evolveCurveDisplay extends Object{	dirDerDisplay DD = new dirDerDisplay();		//-----------------------------------------------------	// Evolve an open curve without curvilinear constraint	//-----------------------------------------------------			public void evolveCurve(DisplayCurve curvein, ImageDisplay imgin, double gamma, int maxiter, int fixedlength, double Elasticity)		{						for(int i=0; i<maxiter; i++)				{					DD.getDirDerivatives(imgin.edgemapX, imgin.edgemapY, curvein, fixedlength);					curvein.updateCurve(DD.DC_final, DD.DD_final, gamma);				}							return;		}			//-----------------------------------------------------	// Evolve an closed curve with curvilinear constraint	//-----------------------------------------------------		public void evolveCurveClosed(ImagePlus imp, Curve curvein, ImageDisplay imgin, double gamma, int maxiter, boolean showmovie)		{						double[] CX = new double[curvein.Npoints];			double[] CY = new double[curvein.Npoints];			double length=0;						CreateMovie movie = new CreateMovie(imp,curvein);			for(int i=0; i<maxiter; i++)				{					if(i%10 ==0)						{							DD.getDirDerClosed(imgin.edgemapX, imgin.edgemapY, curvein,0);							length = DD.Newlength;						}					DD.getDirDerClosed(imgin.edgemapX, imgin.edgemapY, curvein, length);					for(int j=0;j<curvein.Npoints;j++)						{							CX[j] = curvein.CoeffX[j]+gamma*DD.DC_final[j];							CY[j] = curvein.CoeffY[j]+gamma*DD.DD_final[j];						}					curvein.updateCurve(CX, CY);					if(showmovie)						movie.addSlice();				}			if(showmovie)				movie.showMovie();						return;		}	// end of class}