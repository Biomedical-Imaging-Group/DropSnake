/*====================================================================| DropSnake Version: March 22, 2005\===================================================================*//*====================================================================| EPFL/STI/IOA/BIG| Aur�lien Stalder| aurelien.stalder@gmail.com|\===================================================================*/// Based on the plugin SplineSnake by Mathews Jacob; Version: March 1, 2003package dropsnake;import ij.plugin.PlugIn;import ij.process.*;import java.awt.*;import java.awt.event.*;import java.io.*;import java.util.*;import java.lang.*;import ij.*;import ij.gui.*;//--------------------------------------------------------------// Class responsible for all the preferences.//--------------------------------------------------------------public class SplineSnakePreferences extends Object{	// GUI PARAMETERS	//-----------------		public int GUIMaxiter=40;	private int GUIOptLevel = 2;	public double GUIGamma=1;	public double GUISigma=2;		public int Nresample=20;	public int KnotInerval=20;	public int SizeBuffer=4;			public boolean showKnots = false;	public boolean showPath = false;	public boolean mousePress = false;		public boolean autoKnots=false;		public boolean initialization=false;		public boolean stack=false;			// Snake PARAMETERS	//-----------------			public int SnakeMaxIter = 3000;		public double knotsRatio = 1.0;	public double eRatio = 0.5;	public double Psample;		public double SnakeGamma = 1;	public double SnakeThreshold = 0.01;		public double SnakeWeight=1.0;	private int choiceWeightLevel=0;	public double SnakeSigma = 2;	public double curveConstraint=0.95;	//public double springWeight=0.75;		public boolean demo = false;	//public boolean curvilinear= true;	public boolean EnergySurfaces= true;	public boolean interpolate= true;	public boolean reflectedProfile= true;			public boolean means = true;	public boolean springs = false;	public boolean gradmag=false;		public double scale=192.8;		// Dialog variables	//-----------------		private Dialog dlg;		private Checkbox ckKnots;	private Checkbox ckPath;	//private Checkbox ckMousePress;	private Checkbox ckAutoKnots;			private Button bnOK = new Button();	private Button bnCancel = new Button();	private Button bnSave = new Button();	private Button bnDefault = new Button();		private Choice GUIiter; 	private TextField txtGUIGamma = new TextField();	private TextField txtGUISigma = new TextField();	private TextField txtInterval = new TextField();			private TextField txtSnakeMaxIter = new TextField();	private TextField txtKnotsRatio = new TextField();	private TextField txtERatio = new TextField();	private TextField txtPsample = new TextField();		private TextField txtScale = new TextField(6);		private TextField txtSnakeGamma = new TextField();	private TextField txtSnakeThreshold = new TextField();		private Choice choicesnakeWeight; 	private TextField txtSnakeWeight = new TextField();	private TextField txtSnakeSigma = new TextField();	private Choice choiceRegionType; 	//private TextField txtSpringWeight = new TextField();		private Checkbox ckDemo;	//private Checkbox ckCurvilinear;	//private Checkbox ckSprings;		private GridBagLayout 	layout;	private GridBagConstraints 	constraint;	private splineSnakeHandler ph;		private Checkbox ckEnergySurfaces;	private Checkbox ckInterpolate;	private Checkbox ckReflectedProfile;			//public int knotsNumber=30;		//knotsNumber!!!!!!		public double knotsDistance=20;	public double gamma=0.5;	public boolean Laplace;	static private String prefsfile = "plugins/drop_analysis/prefsSnake.txt";	// Constructor: responsible for reading the current preferences from	// file: located at Prefences/prefs.txt	//--------------------------------------------------------------------		public SplineSnakePreferences(splineSnakeHandler splineSnakeHandler)			{				readParameters(prefsfile);				this.ph = splineSnakeHandler;			}	//--------------------------------------------------------------------	// Build the dialog box.	//--------------------------------------------------------------------	public void doDialog()	{					dlg = new Dialog(new Frame(), "Preferences");			layout = new GridBagLayout();		constraint = new GridBagConstraints();				GUIiter = new Choice(); 		GUIiter.add("None");		GUIiter.add("Low");		GUIiter.add("Medium");		GUIiter.add("High");		GUIiter.select(GUIOptLevel);				Double StrGamma = new Double(GUIGamma);		txtGUIGamma.setText(StrGamma.toString());				Double StrSigma = new Double(GUISigma);		txtGUISigma.setText(StrSigma.toString());				Integer StrInterval = new Integer(KnotInerval);		txtInterval.setText(StrInterval.toString());			txtGUIGamma.setColumns(10);		txtGUISigma.setColumns(10);		txtInterval.setColumns(10);				ckKnots 	= new Checkbox(" Show Curve Knots ", showKnots);		ckPath 		= new Checkbox(" Show Mouse Path", showPath);		//ckMousePress = new Checkbox("Input clicks as springs", mousePress);		ckAutoKnots = new Checkbox("Place knots automatically", autoKnots);					Panel pnGUITxt = new Panel();		pnGUITxt.setLayout(layout);		addComponent(pnGUITxt, 0, 0, 1, 1, 2, new Label("Optimization"));		addComponent(pnGUITxt, 0, 1, 1, 1, 2, GUIiter);				addComponent(pnGUITxt, 2, 0, 1, 1, 2, new Label("Step Size"));		addComponent(pnGUITxt, 2, 1, 1, 1, 2, txtGUIGamma);		addComponent(pnGUITxt, 3, 0, 1, 1, 2, new Label("Smoothing radius"));		addComponent(pnGUITxt, 3, 1, 1, 1, 2, txtGUISigma);				Panel pnGUIchkBox = new Panel();		pnGUIchkBox.setLayout(layout);				addComponent(pnGUIchkBox, 0, 0, 1, 1, 2, ckKnots);		addComponent(pnGUIchkBox, 1, 0, 1, 1, 2, ckPath);		//addComponent(pnGUIchkBox, 2, 0, 1, 1, 2, ckMousePress);		addComponent(pnGUIchkBox, 3, 0, 1, 1, 2, ckAutoKnots);				Panel pnGUI = new Panel();		pnGUI.setLayout(layout);		addComponent(pnGUI, 0, 0, 1, 1, 5, pnGUITxt);		addComponent(pnGUI, 2, 0, 1, 1, 5, pnGUIchkBox);				Integer StrMaxIter = new Integer(SnakeMaxIter);		txtSnakeMaxIter.setText(StrMaxIter.toString());			Double StrKnotsRatio = new Double(knotsRatio);		txtKnotsRatio.setText(StrKnotsRatio.toString());				Double StrERatio = new Double(eRatio);		txtERatio.setText(StrERatio.toString());			Double StrDouble1 = new Double(Psample);		txtPsample.setText(StrDouble1.toString());			Double StrScale = new Double(scale);		txtScale.setText(StrScale.toString());			StrGamma = new Double(SnakeGamma);		txtSnakeGamma.setText(StrGamma.toString());				StrSigma = new Double(SnakeSigma);		txtSnakeSigma.setText(StrSigma.toString());				Double StrThreshold = new Double(SnakeThreshold);		txtSnakeThreshold.setText(StrThreshold.toString());				//Double StrSpringWt = new Double(springWeight);		//txtSpringWeight.setText(StrSpringWt.toString());		 				choicesnakeWeight = new Choice(); 		choicesnakeWeight.add("100 % Gradient");		choicesnakeWeight.add("75% Gradient");		choicesnakeWeight.add("50 % Gradient");		choicesnakeWeight.add("25% Gradient");		choicesnakeWeight.add("100% Region");		choicesnakeWeight.select(choiceWeightLevel);				txtGUIGamma.setColumns(10);		txtGUISigma.setColumns(10);		txtInterval.setColumns(10);				choiceRegionType = new Choice(); 		choiceRegionType.add("Means");		choiceRegionType.add("Gaussian");		choiceRegionType.add("Magnitude");		if(means)			choiceRegionType.select(0);		else			choiceRegionType.select(1);					ckDemo 	= new Checkbox(" Animate Evolution ", demo);		//ckCurvilinear 		= new Checkbox(" Curvilinear constraint", curvilinear);		ckEnergySurfaces	= new Checkbox(" Internal energy", EnergySurfaces);		ckInterpolate	= new Checkbox(" Image interpolation", interpolate);		ckReflectedProfile	= new Checkbox(" Symmetric snake", reflectedProfile);				//ckSprings 		= new Checkbox(" Spring constraint", springs);					Panel pnSnakeTxt = new Panel();		pnSnakeTxt.setLayout(layout);		addComponent(pnSnakeTxt, 0, 0, 1, 1, 1, new Label("External Energy"));		addComponent(pnSnakeTxt, 0, 1, 1, 1, 1, choicesnakeWeight);		addComponent(pnSnakeTxt, 1, 0, 1, 1, 1, new Label("Max # Iterations"));		addComponent(pnSnakeTxt, 1, 1, 1, 1, 1, txtSnakeMaxIter);		addComponent(pnSnakeTxt, 2, 0, 1, 1, 1, new Label("Step Size"));		addComponent(pnSnakeTxt, 2, 1, 1, 1, 1, txtSnakeGamma);		addComponent(pnSnakeTxt, 3, 0, 1, 1, 1, new Label("Accuracy on CA [�]"));		addComponent(pnSnakeTxt, 3, 1, 1, 1, 1, txtSnakeThreshold);		addComponent(pnSnakeTxt, 4, 0, 1, 1, 1, new Label("Smoothing radius"));		addComponent(pnSnakeTxt, 4, 1, 1, 1, 1, txtSnakeSigma);		//addComponent(pnSnakeTxt, 5, 0, 1, 1, 1, new Label("Spring Weight"));		//addComponent(pnSnakeTxt, 5, 1, 1, 1, 1, txtSpringWeight);		addComponent(pnSnakeTxt, 5, 0, 1, 1, 1, new Label("Eint/Eimage"));		addComponent(pnSnakeTxt, 5, 1, 1, 1, 1, txtERatio);				addComponent(pnSnakeTxt, 6, 0, 1, 1, 1, new Label("Region Method"));		addComponent(pnSnakeTxt, 6, 1, 1, 1, 1, choiceRegionType);		addComponent(pnSnakeTxt, 7, 0, 1, 1, 2, new Label("Knot spacing at interface"));		addComponent(pnSnakeTxt, 7, 1, 1, 1, 2, txtInterval);		addComponent(pnSnakeTxt, 8, 0, 1, 1, 1, new Label("Knot spacing ratio"));		addComponent(pnSnakeTxt, 8, 1, 1, 1, 1, txtKnotsRatio);		addComponent(pnSnakeTxt, 9, 0, 1, 1, 1, new Label("Sampling period at interface [pix]"));		addComponent(pnSnakeTxt, 9, 1, 1, 1, 1, txtPsample);				Panel pnSnakechkBox = new Panel();		pnSnakechkBox.setLayout(layout);				//addComponent(pnSnakechkBox, 0, 0, 1, 1, 1, ckCurvilinear);		addComponent(pnSnakechkBox, 1, 0, 1, 1, 1, ckDemo);		//addComponent(pnSnakechkBox, 2, 0, 1, 1, 1, ckSprings);		addComponent(pnSnakechkBox, 2, 0, 1, 1, 1, ckReflectedProfile);				addComponent(pnSnakechkBox, 3, 0, 1, 1, 1, ckInterpolate);				addComponent(pnSnakechkBox, 4, 0, 1, 1, 1, ckEnergySurfaces);				Panel pnSnake = new Panel();		pnSnake.setLayout(layout);	//	addComponent(pnSnake, 0, 0, 1, 1, 5, pnSnakeTxt);	//	addComponent(pnSnake, 2, 0, 1, 1, 5, pnSnakechkBox);				Panel pnDisplay = new Panel();		pnDisplay.setLayout(layout);		addComponent(pnDisplay, 0, 0, 1, 1, 1, new Label(" Image scale [pixels/mm]"));		addComponent(pnDisplay, 0, 1, 1, 1, 1, txtScale);						// Panel buttons 		Panel pnButtons = new Panel();		pnButtons.setLayout(layout);				bnCancel = new Button("Cancel");		pnButtons.add(bnCancel);		bnDefault = new Button("  Default  ");		pnButtons.add(bnDefault);		bnSave = new Button("  Save  ");		pnButtons.add(bnSave);		bnOK = new Button("  OK  ");		pnButtons.add(bnOK);				Panel pnMain = new Panel();		pnMain.setLayout(layout);		//addComponent(pnGUITxt, 0, 0, 1, 1, 1, new Label("Optimization"));		addComponent(pnMain,  0, 0, 1, 1, 5, new Label("GUI",Label.CENTER));		addComponent(pnMain,  0, 1, 1, 1, 5, new Label("SNAKE",Label.CENTER));				addComponent(pnMain,  2, 0, 1, 1, 5, new Label("Volume and Surfaces computation",Label.CENTER));				addComponent(pnMain, 1, 0, 1, 1, 10, pnGUI);		addComponent(pnMain, 3, 0, 1, 1, 10, pnDisplay);				addComponent(pnMain, 1, 1, 1, 1, 10, pnSnakeTxt);		addComponent(pnMain, 3, 1, 1, 1, 10, pnSnakechkBox);		addComponent(pnMain, 4, 0, 2, 1, 10, pnButtons);						if(GUIOptLevel == 0)			{				txtGUIGamma.enable(false);				txtGUISigma.enable(false);			}		else			{				txtGUIGamma.enable(true);				txtGUISigma.enable(true);			}					if(choicesnakeWeight.getSelectedItem() == "100 % Gradient")			choiceRegionType.enable(false);		else			choiceRegionType.enable(true);			// Action Handlers		//---------------------------------						bnOK.addActionListener(new ActionListener() {			public void actionPerformed (ActionEvent e) {							GUIOptLevel = GUIiter.getSelectedIndex();				GUIMaxiter=20*GUIOptLevel;				GUIGamma = getDoubleValue(txtGUIGamma, 0, 1, 100);				GUISigma = getDoubleValue(txtGUISigma, 0.001, 1, 10);				KnotInerval=(int)getDoubleValue(txtInterval, 4, 1, 500);				Nresample=KnotInerval;									showKnots = ckKnots.getState();				showPath = ckPath.getState();				//mousePress = ckMousePress.getState();					autoKnots = ckAutoKnots.getState();									SnakeMaxIter = (int)getDoubleValue(txtSnakeMaxIter, 0, 1, 5000);				knotsRatio = getDoubleValue(txtKnotsRatio, 0.0, 0.0, 10.0);				eRatio = getDoubleValue(txtERatio, 0.0, 0.5, 10.0);				Psample = getDoubleValue(txtPsample, 0.0, 1.0, 1000.0);				scale = getDoubleValue(txtScale, 0.0, 192.81, 10000);								gamma=(knotsRatio-1.0)/(knotsRatio+1.0);								SnakeGamma = getDoubleValue(txtSnakeGamma, 0, 1, 10);				SnakeSigma = getDoubleValue(txtSnakeSigma, 0, 2, 10);				SnakeThreshold = getDoubleValue(txtSnakeThreshold, 0, 0.05, 1);				choiceWeightLevel = choicesnakeWeight.getSelectedIndex();				SnakeWeight = choiceWeightLevel*0.25;				//springWeight = getDoubleValue(txtSpringWeight, 0, 0.01, 10);								means = (choiceRegionType.getSelectedIndex()==0);				gradmag = (choiceRegionType.getSelectedIndex()==2);				demo = ckDemo.getState();				//curvilinear = ckCurvilinear.getState();				EnergySurfaces = ckEnergySurfaces.getState();				interpolate = ckInterpolate.getState();				reflectedProfile = ckReflectedProfile.getState();				//springs = ckSprings.getState();									dlg.hide();			}		});					bnDefault.addActionListener(new ActionListener() {			public void actionPerformed (ActionEvent e) {									// GUI PARAMETERS				//-----------------						GUIOptLevel = 2;					GUIMaxiter=20*GUIOptLevel;					GUIGamma=1;					GUISigma=5.0;										Nresample=20;					KnotInerval=20;					SizeBuffer=4;											showKnots = true;					showPath = false;					//mousePress = false;						autoKnots = false;												GUIiter.select(GUIOptLevel);					Double StrDouble = new Double(GUIGamma);					txtGUIGamma.setText(StrDouble.toString());					StrDouble = new Double(GUISigma);					txtGUISigma.setText(StrDouble.toString());					Integer StrInteger = new Integer(KnotInerval);					txtInterval.setText(StrInteger.toString());					ckKnots.setState(showKnots);					ckPath.setState(showPath);														// Snake PARAMETERS				//-----------------							SnakeMaxIter = 3000;					SnakeGamma = 1;					SnakeThreshold = 0.01;					choiceWeightLevel=0;					SnakeSigma = 5.0;					curveConstraint=0.75;					knotsRatio = 2.0;					eRatio=0.3;					Psample=1.0;					scale=192.81;					demo = true;					//curvilinear= true;					EnergySurfaces=true;					interpolate=true;					reflectedProfile=true;					means = true;															choicesnakeWeight.select(choiceWeightLevel);										StrInteger = new Integer(SnakeMaxIter);					txtSnakeMaxIter.setText(StrInteger.toString());										StrDouble = new Double(knotsRatio);					txtKnotsRatio.setText(StrDouble.toString());										StrDouble = new Double(eRatio);					txtERatio.setText(StrDouble.toString());					StrDouble = new Double(Psample);					txtPsample.setText(StrDouble.toString());					StrDouble = new Double(scale);					txtScale.setText(StrDouble.toString());						StrDouble = new Double(SnakeGamma);					txtSnakeGamma.setText(StrDouble.toString());							StrDouble = new Double(SnakeSigma);					txtSnakeSigma.setText(StrDouble.toString());							StrDouble = new Double(SnakeThreshold);					txtSnakeThreshold.setText(StrDouble.toString());									//StrDouble = new Double(springWeight);					//txtSpringWeight.setText(StrDouble.toString());									if(means)						choiceRegionType.select(0);					else						choiceRegionType.select(1);										ckDemo.setState(showKnots);					//ckCurvilinear.setState(curvilinear);					ckEnergySurfaces.setState(EnergySurfaces);					ckInterpolate.setState(interpolate);					ckReflectedProfile.setState(reflectedProfile);										//ckSprings.setState(springs);					}		});						bnCancel.addActionListener(new ActionListener() {			public void actionPerformed (ActionEvent e) {				dlg.hide();			}		});						bnSave.addActionListener(new ActionListener() {			public void actionPerformed (ActionEvent e) {				GUIOptLevel = GUIiter.getSelectedIndex();				GUIMaxiter=20*GUIOptLevel;				GUIGamma = getDoubleValue(txtGUIGamma, 0, 1, 100);				GUISigma = getDoubleValue(txtGUISigma, 0.001, 1, 10);				KnotInerval=(int)getDoubleValue(txtInterval, 4, 1, 500);				Nresample=KnotInerval;									showKnots = ckKnots.getState();				showPath = ckPath.getState();				//mousePress = ckMousePress.getState();				autoKnots = ckAutoKnots.getState();								SnakeMaxIter = (int)getDoubleValue(txtSnakeMaxIter, 0, 1, 5000);				knotsRatio = getDoubleValue(txtKnotsRatio, 1.0, 2.0, 10.0);				eRatio = getDoubleValue(txtERatio, 0, 0.5, 10.0);				Psample = getDoubleValue(txtPsample, 0, 1.0, 1000.0);								scale = getDoubleValue(txtScale, 0, 192.81, 10000.0);							SnakeGamma = getDoubleValue(txtSnakeGamma, 0, 1, 10);				SnakeSigma = getDoubleValue(txtSnakeSigma, 0, 2, 10);				SnakeThreshold = getDoubleValue(txtSnakeThreshold, 0.0, 0.01, 1.0);				choiceWeightLevel = choicesnakeWeight.getSelectedIndex();				SnakeWeight = choiceWeightLevel*0.25;				//springWeight = getDoubleValue(txtSpringWeight, 0, 0.01, 10);									means = (choiceRegionType.getSelectedIndex()==0);				demo = ckDemo.getState();				//curvilinear = ckCurvilinear.getState();					EnergySurfaces = ckEnergySurfaces.getState();					interpolate = ckInterpolate.getState();					reflectedProfile = ckReflectedProfile.getState();								//springs = ckSprings.getState();					writeParameters();		}		});								GUIiter.addItemListener(new ItemListener() {			public void itemStateChanged (ItemEvent e) {				if(GUIiter.getSelectedItem() == "None")					{						txtGUIGamma.enable(false);						txtGUISigma.enable(false);					}				else					{						txtGUIGamma.enable(true);						txtGUISigma.enable(true);					}			}		});				choicesnakeWeight.addItemListener(new ItemListener() {			public void itemStateChanged (ItemEvent e) {				if(choicesnakeWeight.getSelectedItem() == "100 % Gradient")					choiceRegionType.enable(false);				else					choiceRegionType.enable(true);								}		});				txtInterval.addActionListener(new ActionListener() {			public void actionPerformed (ActionEvent e) {				KnotInerval=(int)getDoubleValue(txtInterval, 4, 1, 500);				if(KnotInerval < 10);					//IJ.error(" Too close knot spacing. Snake may give a suboptimal performance");				//IJ.error("You will have to re-enter the curve for this change to come into effect");				}		});						ckKnots.addItemListener(new ItemListener() {			public void itemStateChanged (ItemEvent e) {				showKnots = ckKnots.getState();				ph.imp.draw();				}		});				ckPath.addItemListener(new ItemListener() {			public void itemStateChanged (ItemEvent e) {				showPath = ckPath.getState();				ph.imp.draw();				}		});				ckEnergySurfaces.addItemListener(new ItemListener() {			public void itemStateChanged (ItemEvent e) {				txtKnotsRatio.enable(ckEnergySurfaces.getState());				txtERatio.enable(ckEnergySurfaces.getState());			}		});						// Building the main panel		dlg.add(pnMain);		dlg.setModal(true);		dlg.pack();		GUI.center(dlg);		dlg.setVisible(true);		IJ.wait(250);								if(GUIiter.getSelectedIndex() == 0)			{				txtGUIGamma.enable(false);				txtGUISigma.enable(false);			}		else			{				txtGUIGamma.enable(true);				txtGUISigma.enable(true);			}					if(choicesnakeWeight.getSelectedItem() == "100 % Gradient")			choiceRegionType.enable(false);		else			choiceRegionType.enable(true);					//txtSpringWeight.enable(ckSprings.getState());					}	//--------------------------------------------------------------------	// Add a component in a panel in the northeast of the cell.	//--------------------------------------------------------------------	final private void addComponent(	final Panel pn,	final int row, final int col,	final int width, final int height,	final int space,	final Component comp) {		constraint.gridx = col;		constraint.gridy = row;		constraint.gridwidth = width;		constraint.gridheight = height;		constraint.anchor = GridBagConstraints.NORTHWEST;		constraint.insets = new Insets(space, space, space, space);		constraint.weightx = IJ.isMacintosh()?90:100;		constraint.fill = constraint.HORIZONTAL;		layout.setConstraints(comp, constraint);		pn.add(comp);	}			//--------------------------------------------------------------------	//  Get a double value from a TextField between minimal and maximal values.	//--------------------------------------------------------------------		private double getDoubleValue(TextField text, double mini, double defaut, double maxi)		{		double d;		try {			d = (new Double(text.getText())).doubleValue();			if (d < mini)  text.setText( "" + mini);			if (d > maxi)  text.setText( "" + maxi);		}				catch (Exception e) {			if (e instanceof NumberFormatException) 				text.setText( "" + defaut);		}		d = (new Double(text.getText())).doubleValue();		return d;	}		//--------------------------------------------------------------------	//  Write the parameters to the file	//--------------------------------------------------------------------			private void writeParameters()		{				try{				FileWriter fw = new FileWriter(prefsfile);								// GUI PARAMETERS				//-----------------								fw.write(GUIOptLevel+"\n");				fw.write(GUIGamma+"\n");				fw.write(GUISigma+"\n");				fw.write(Nresample+"\n");				fw.write(KnotInerval+"\n");				fw.write(SizeBuffer+"\n");								fw.write(showKnots+"\n");				fw.write(showPath+"\n");				//fw.write(mousePress+"\n");				fw.write(autoKnots+"\n");								GUIMaxiter = GUIOptLevel*20;								// Snake PARAMETERS				//-----------------												fw.write(SnakeMaxIter+"\n");								fw.write(knotsRatio+"\n");				fw.write(eRatio+"\n");				fw.write(Psample+"\n");								fw.write(scale+"\n");								fw.write(SnakeGamma+"\n");				fw.write(SnakeThreshold+"\n");				fw.write(choiceWeightLevel+"\n");				fw.write(SnakeSigma+"\n");				fw.write(curveConstraint+"\n");				//fw.write(springWeight+"\n");				fw.write(demo+"\n");				//fw.write(curvilinear+"\n");				fw.write(EnergySurfaces+"\n");				fw.write(interpolate+"\n");				fw.write(reflectedProfile+"\n");								fw.write(means+"\n");				//fw.write(springs+"\n");								//SnakeWeight = (double)choiceWeightLevel*0.25;				fw.close();				} catch (FileNotFoundException e1) {				IJ.error("File not found exception");				} catch (IOException e1) {					IJ.error("IOException exception");				} catch (NumberFormatException e1) {					IJ.error("Number format exception");}							}										//--------------------------------------------------------------------	//  Read the parameters from the file	//--------------------------------------------------------------------					private void readParameters(String filename)		{			try{			FileReader fr = new FileReader(filename);			BufferedReader br = new BufferedReader(fr);			String line;														// GUI PARAMETERS			//-----------------							GUIOptLevel = intRead(fr, br);			GUIGamma   = doubleRead(fr, br);			GUISigma = doubleRead(fr, br);			Nresample = intRead(fr, br);			KnotInerval = intRead(fr, br);			SizeBuffer = intRead(fr, br);			showKnots =  boolRead(fr, br);			showPath =  boolRead(fr, br);			//mousePress =  boolRead(fr, br);			autoKnots =  boolRead(fr, br);						GUIMaxiter=20*GUIOptLevel;								// SNAKE PARAMETERS			//------------------										SnakeMaxIter = intRead(fr, br);						knotsRatio   = doubleRead(fr, br);			eRatio   = doubleRead(fr, br);			Psample   = doubleRead(fr, br);						scale= doubleRead(fr, br);			SnakeGamma   = doubleRead(fr, br);			SnakeThreshold = doubleRead(fr, br);			choiceWeightLevel =  intRead(fr, br);			SnakeSigma =  doubleRead(fr, br);			curveConstraint =  doubleRead(fr, br);			//springWeight =  doubleRead(fr, br);			demo =  boolRead(fr, br);			//curvilinear =  boolRead(fr, br);			EnergySurfaces = boolRead(fr, br);			interpolate = boolRead(fr, br);			reflectedProfile = boolRead(fr, br);			means =  boolRead(fr, br);			//springs =  boolRead(fr, br);						SnakeWeight = choiceWeightLevel*0.25;			gamma=(knotsRatio-1.0)/(knotsRatio+1.0);						fr.close();			} catch (FileNotFoundException e) {			IJ.error("File not found exception in GUI preferences file");			} catch (IOException e) {				IJ.error("IOException exception in GUI preferences file");			} catch (NumberFormatException e) {				IJ.error("Number format exception in GUI preferences file");}					}			//--------------------------------------------------------------------	//  functions performing read ...	//--------------------------------------------------------------------		private double doubleRead(FileReader fr,BufferedReader br)		{			String line="";			try{				if ((line = br.readLine()) == null)					{						fr.close();						IJ.error("Corrupted preferences file");						return(0);					}			}catch (IOException e) {				IJ.error("IOException exception in GUI preferences file");			} catch (NumberFormatException e) {				IJ.error("Number format exception in GUI preferences file");}										line = line.trim();			Double temp=Double.valueOf(line);			double out = temp.doubleValue();						return(out);		}				private int intRead(FileReader fr,BufferedReader br)		{			String line="";			try{			if ((line = br.readLine()) == null)				{					fr.close();					IJ.error("Corrupted preferences file");					return(0);				}			}catch (IOException e) {				IJ.error("IOException exception in GUI preferences file");			} catch (NumberFormatException e) {				IJ.error("Number format exception in GUI preferences file");}			line = line.trim();			int out = Integer.parseInt(line);						return(out);		}			private boolean boolRead(FileReader fr,BufferedReader br)		{			String line="";			try{			if ((line = br.readLine()) == null)				{					fr.close();					IJ.error("Corrupted preferences file");					return(false);				}			}catch (IOException e) {				IJ.error("IOException exception in GUI preferences file");			} catch (NumberFormatException e) {				IJ.error("Number format exception in GUI preferences file");}				line = line.trim();			Boolean btemp =Boolean.valueOf(line);			boolean out = btemp.booleanValue();						return(out);		}}				